// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieStore.DataAccess.Data;

#nullable disable

namespace MovieStore.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240424154828_SeedJoinTables")]
    partial class SeedJoinTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MovieActor", (string)null);

                    b.HasData(
                        new
                        {
                            ActorsId = 3,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 5,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 4,
                            MoviesId = 2
                        },
                        new
                        {
                            ActorsId = 5,
                            MoviesId = 2
                        },
                        new
                        {
                            ActorsId = 2,
                            MoviesId = 3
                        },
                        new
                        {
                            ActorsId = 6,
                            MoviesId = 3
                        },
                        new
                        {
                            ActorsId = 1,
                            MoviesId = 4
                        },
                        new
                        {
                            ActorsId = 2,
                            MoviesId = 4
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MovieGenre", (string)null);

                    b.HasData(
                        new
                        {
                            GenresId = 1,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 2,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 5,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 4,
                            MoviesId = 2
                        },
                        new
                        {
                            GenresId = 6,
                            MoviesId = 2
                        },
                        new
                        {
                            GenresId = 2,
                            MoviesId = 3
                        },
                        new
                        {
                            GenresId = 3,
                            MoviesId = 3
                        },
                        new
                        {
                            GenresId = 6,
                            MoviesId = 3
                        },
                        new
                        {
                            GenresId = 2,
                            MoviesId = 4
                        },
                        new
                        {
                            GenresId = 5,
                            MoviesId = 4
                        },
                        new
                        {
                            GenresId = 6,
                            MoviesId = 4
                        });
                });

            modelBuilder.Entity("MovieStore.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "\\images\\actor\\6753d8f9-22f0-461e-b7b8-ab7f1ea2aa56.jpg",
                            Name = "Leonardo DiCaprio"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "\\images\\actor\\741cbe51-3a8f-4a11-9b28-dc43d5e3b866.jpg",
                            Name = "Cillian Murphy"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "\\images\\actor\\902f1b7f-0655-4f50-8a98-f5e9ba6a7990.jpg",
                            Name = "Anne Hathaway"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "\\images\\actor\\a82fa331-1a40-4c01-8d7a-be71d4e8c2ad.jpg",
                            Name = "Woody Harrelson"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "\\images\\actor\\b5bb2e2b-d2c4-4dbd-8b4f-e1ac8c9abe29.jpg",
                            Name = "Matthew McConaughey"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "\\images\\actor\\d572b29f-91c9-4bf9-8d25-2b96f1b52d58.jpg",
                            Name = "Robert Downey Jr."
                        });
                });

            modelBuilder.Entity("MovieStore.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 4,
                            Name = "History"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SciFi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("MovieStore.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "When Earth becomes uninhabitable in the future, a farmer and ex-NASA pilot, Joseph Cooper, is tasked to pilot a spacecraft, along with a team of researchers, to find a new planet for humans.",
                            ImageUrl = "\\images\\movie\\8ea24e62-0af2-4aa6-8ecb-fd46822b06e3.jpg",
                            Price = 49.0,
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "During World War II, Lt. Gen. Leslie Groves Jr. appoints physicist J. Robert Oppenheimer to work on the top-secret Manhattan Project. Oppenheimer and a team of scientists spend years developing and designing the atomic bomb. Their work comes to fruition on July 16, 1945, as they witness the world's first nuclear explosion, forever changing the course of history.",
                            ImageUrl = "\\images\\movie\\e9837bd3-d65d-4a1d-b8e4-9c3bed0cf0ed.jpg",
                            Price = 59.0,
                            Title = "Oppenheimer"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Police officers and detectives around the USA are forced to face dark secrets about themselves and the people around them while investigating homicides.",
                            ImageUrl = "\\images\\movie\\4c662a58-4bbe-45cc-96d1-7f14e7870c91.jpg",
                            Price = 39.0,
                            Title = "True Detective"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cobb steals information from his targets by entering their dreams. He is wanted for his alleged role in his wife's murder and his only chance at redemption is to perform a nearly impossible task.",
                            ImageUrl = "\\images\\movie\\de245963-1f4d-44c4-afdb-117660ccf946.jpg",
                            Price = 69.0,
                            Title = "Inception"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MovieStore.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStore.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieStore.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieStore.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
